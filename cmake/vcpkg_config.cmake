if(CMAKE_GENERATOR_PLATFORM MATCHES "^[Ww][Ii][Nn]32$")
  set(APP_TARGET_TRIPLET_ARCH x86)
elseif(CMAKE_GENERATOR_PLATFORM MATCHES "^[Xx]64$")
  set(APP_TARGET_TRIPLET_ARCH x64)
elseif(CMAKE_GENERATOR_PLATFORM MATCHES "^[Aa][Rr][Mm]$")
  set(APP_TARGET_TRIPLET_ARCH arm)
elseif(CMAKE_GENERATOR_PLATFORM MATCHES "^[Aa][Rr][Mm]64$")
  set(APP_TARGET_TRIPLET_ARCH arm64)
else()
  if(CMAKE_GENERATOR MATCHES "^Visual Studio 14 2015 Win64$")
      set(APP_TARGET_TRIPLET_ARCH x64)
  elseif(CMAKE_GENERATOR MATCHES "^Visual Studio 14 2015 ARM$")
      set(APP_TARGET_TRIPLET_ARCH arm)
  elseif(CMAKE_GENERATOR MATCHES "^Visual Studio 14 2015$")
      set(APP_TARGET_TRIPLET_ARCH x86)
  elseif(CMAKE_GENERATOR MATCHES "^Visual Studio 15 2017 Win64$")
      set(APP_TARGET_TRIPLET_ARCH x64)
  elseif(CMAKE_GENERATOR MATCHES "^Visual Studio 15 2017 ARM$")
      set(APP_TARGET_TRIPLET_ARCH arm)
  elseif(CMAKE_GENERATOR MATCHES "^Visual Studio 15 2017$")
      set(APP_TARGET_TRIPLET_ARCH x86)
  elseif(CMAKE_GENERATOR MATCHES "^Visual Studio 16 2019$")
      set(APP_TARGET_TRIPLET_ARCH x64)
  else()
      if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin" AND DEFINED CMAKE_SYSTEM_NAME AND NOT CMAKE_SYSTEM_NAME STREQUAL "Darwin")
          list(LENGTH CMAKE_OSX_ARCHITECTURES arch_count)
          if(arch_count EQUAL 0)
              message(WARNING "Unable to determine target architecture. "
                              "Consider providing a value for the CMAKE_OSX_ARCHITECTURES cache variable. "
                              "Continuing without vcpkg.")
              return()
          else()
              if(arch_count GREATER 1)
                  message(WARNING "Detected more than one target architecture. Using the first one.")
              endif()
              list(GET CMAKE_OSX_ARCHITECTURES 0 target_arch)
              if(target_arch STREQUAL arm64)
                  set(APP_TARGET_TRIPLET_ARCH arm64)
              elseif(target_arch STREQUAL arm64s)
                  set(APP_TARGET_TRIPLET_ARCH arm64s)
              elseif(target_arch STREQUAL armv7s)
                  set(APP_TARGET_TRIPLET_ARCH armv7s)
              elseif(target_arch STREQUAL armv7)
                  set(APP_TARGET_TRIPLET_ARCH arm)
              elseif(target_arch STREQUAL x86_64)
                  set(APP_TARGET_TRIPLET_ARCH x64)
              elseif(target_arch STREQUAL i386)
                  set(APP_TARGET_TRIPLET_ARCH x86)
              else()
                  message(WARNING "Unable to determine target architecture, continuing without vcpkg.")
                  return()
              endif()
          endif()
      elseif(CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "x86_64" OR CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "AMD64")
          set(APP_TARGET_TRIPLET_ARCH x64)
      endif()
  endif()
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "WindowsStore" OR CMAKE_SYSTEM_NAME STREQUAL "WindowsPhone")
  set(APP_TARGET_TRIPLET_PLAT uwp)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux" OR (NOT CMAKE_SYSTEM_NAME AND CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux"))
  set(APP_TARGET_TRIPLET_PLAT linux)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin" OR (NOT CMAKE_SYSTEM_NAME AND CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin"))
  set(APP_TARGET_TRIPLET_PLAT osx)
elseif(CMAKE_SYSTEM_NAME STREQUAL "iOS")
  set(APP_TARGET_TRIPLET_PLAT ios)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows" OR (NOT CMAKE_SYSTEM_NAME AND CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows"))
  set(APP_TARGET_TRIPLET_PLAT windows)
elseif(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD" OR (NOT CMAKE_SYSTEM_NAME AND CMAKE_HOST_SYSTEM_NAME STREQUAL "FreeBSD"))
  set(APP_TARGET_TRIPLET_PLAT freebsd)
endif()

if(CMAKE_BUILD_TYPE MATCHES "^[Dd][Ee][Bb][Uu][Gg]$" OR NOT DEFINED CMAKE_BUILD_TYPE)
  set(APP_BUILD_DEBUG TRUE)
else()
  set(APP_BUILD_DEBUG FALSE)
endif()

message("VCPKG_ROOT_DIR: ${_VCPKG_ROOT_DIR}")
message("VCPKG_INSTALLED_DIR: ${_VCPKG_INSTALLED_DIR}")
message("VCPKG_TARGET_TRIPLET: ${VCPKG_TARGET_TRIPLET}")

if(CMAKE_BUILD_TYPE MATCHES "^[Dd][Ee][Bb][Uu][Gg]$" OR NOT DEFINED CMAKE_BUILD_TYPE) #Debug build: Put Debug paths before Release paths.
  set(VCPKG_LIB_INCLUDE_DIR ${_VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/include CACHE INTERNAL "*** vcpkg config ***")
  set(VCPKG_LIB_LINK_DIR    ${_VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/debug/lib  CACHE INTERNAL "*** vcpkg config ***")
else() #Release build: Put Release paths before Debug paths. Debug Paths are required so that CMake generates correct info in autogenerated target files.
  set(VCPKG_LIB_INCLUDE_DIR ${_VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/include  CACHE INTERNAL "*** vcpkg config ***")
  set(VCPKG_LIB_LINK_DIR    ${_VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/lib  CACHE INTERNAL "*** vcpkg config ***")
endif()

message("VCPKG_LIB_INCLUDE_DIR: ${VCPKG_LIB_INCLUDE_DIR}")
message("VCPKG_LIB_LINK_DIR: ${VCPKG_LIB_LINK_DIR}")

function(add_qtmain_lik _target)
  if(WIN32)
    set_target_properties(${_target} PROPERTIES
      WIN32_EXECUTABLE ON
      MACOSX_BUNDLE ON
    )
    # target_link_options(${_target} PRIVATE "$<$<CONFIG:Release>:/SUBSYSTEM:WINDOWS>")
    target_link_libraries(${_target} PRIVATE Qt5::WinMain)
  elseif(APPLE)

  elseif(LINUX)

  else()
    message(FATAL_ERROR "Unknown platform type")
  endif()
endfunction(add_qtmain_lik)



